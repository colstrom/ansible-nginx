# {{ ansible_managed }}

{% if nginx_whitelist_ips is iterable %}
map $remote_addr $remote_addr_in_whitelist {
  default 0;

{%  for allowed_address in nginx_whitelist_ips %}
  {{ allowed_address }} 1;
{%  endfor %}
}

map $http_x_forwarded_for $x_forwarded_for_in_whitelist {
  default 0;

{%  for allowed_address in nginx_whitelist_ips %}
  {{ allowed_address }} 1;
{%  endfor %}
}
{% endif %}

{% if nginx_ssl_disabled %}
server {
  listen {{ nginx_ssl_port }};
  return 301 http://$host$request_uri;
}
{% endif %}

server {
{% if nginx_insecure_listener_enabled %}
  listen {{ nginx_port }};
{% endif %}

{% if nginx_developer_environments_enabled %}
  server_name ~{{ nginx_developer_environment_regexp }};
  if ( !-d {{ nginx_developer_environment_docroot }} ) { return 404 'Unable to Locate Matching Environment'; }
  root {{ nginx_developer_environment_docroot }};
{% else %}
  server_name {{ nginx_server_name }};
  root {{ nginx_docroot }};
  index {{ nginx_index }};
{% endif %}

{% if nginx_localhost_authorization_required %}
  satisfy any;
  allow 127.0.0.1;
  deny all;
{% endif %}

{% if nginx_restricted_paths_for_security is iterable %}
  location ~* ({% for restricted_path in nginx_restricted_paths_for_security %}{{ restricted_path }}{% if not loop.last %}|{% endif %}{% endfor %}) {
    deny all;
    return 404;
  }
{% endif %}

{% if nginx_ssl_enabled %}
  listen {{ nginx_ssl_port }} ssl{% if nginx_http2_enabled %} http2{% endif %};
  ssl_certificate {{ nginx_ssl_certificate_path }};
  ssl_certificate_key {{ nginx_ssl_key_path }};

  ssl_prefer_server_ciphers on;
{% if nginx_ssl_should_degrade_security_to_accomodate_old_browsers %}
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
{% else %}
  ssl_protocols TLSv1.2;
  ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 !RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";
{% endif %}
{% endif %}

  ###
  # SSL Detection
  ###

  # This header would be set if an upstream source (such as an ELB) has negotiated an SSL connection.
  if ( $http_x_forwarded_proto = 'https' ) {
    set $ssl_enabled true;
  }

  # This would be set if nginx is handling the SSL connection directly.
  if ( $https = 'on' ) {
    set $ssl_enabled true;
  }

{% if nginx_ssl_enforced %}
  ###
  # Enforce SSL
  ###

  if ( $ssl_enabled != true ) {
    return 301 https://$host$request_uri;
  }
{% endif %}

{% if nginx_ssl_redirect_paths_http_to_https is iterable %}
  location ~ ^({% for secure_path in nginx_ssl_redirect_paths_http_to_https %}{{ secure_path }}{% if not loop.last %}|{% endif %}{% endfor %}) {
    if ($ssl_enabled != true) {
      return 301 https://$host$request_uri;
    }
  }
{% endif %}

{% if nginx_pre_extended_configuration is defined %}
  {{ nginx_pre_extended_configuration }}
{% endif %}

{% if nginx_auth_enabled %}
  auth_basic "Private";
  auth_basic_user_file /data/www/auth;
{% endif %}

  client_max_body_size {{ nginx_client_max_body_size }};

  location ~* {{ nginx_file_extension_blacklist }} {
    return 403;
  }

{% if nginx_static_asset_handling_enabled %}
  location ~* \.(?:ico|css|js|gif|jpe?g|png|svgz?|webp|eot|ttf|woff|otf|pdf)$ {
{% if nginx_access_log_ignore_static_assets %}
    access_log off;
{% endif %}
    expires max;
    add_header Pragma public;
    add_header Cache-Control public;

{% if nginx_cors_enabled %}
{% if nginx_cors_whitelist_enabled %}
    if ($http_origin ~* ({{ nginx_cors_whitelist_protocol }}://{{ nginx_cors_whitelist_hosts }}(:[0-9]+)?)) {
        set $cors_allowed 'true';
    }
{% else %}
    set $cors_allowed 'true';
{% endif %}
    if ($cors_allowed) {
      set $cors_request $request_method;
    }

    if ($cors_request ~* ^(GET|POST)$) {
{% if nginx_cors_whitelist_enabled %}
      add_header Access-Control-Allow-Origin "$http_origin";
{% else %}
      add_header Access-Control-Allow-Origin *;
{% endif %}
      add_header Access-Control-Allow-Credentials 'true';
    }

    if ($cors_request = 'OPTIONS') {
{% if nginx_cors_whitelist_enabled %}
      add_header Access-Control-Allow-Origin "$http_origin";
{% else %}
      add_header Access-Control-Allow-Origin *;
{% endif %}
      add_header Access-Control-Allow-Credentials 'true';
      add_header Access-Control-Max-Age 1728000;
      add_header Access-Control-Allow-Methods 'GET, POST, OPTIONS';
      add_header Access-Control-Allow-Headers 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';
      add_header Content-Length 0;
      add_header Content-Type 'text/plain charset=UTF-8';

      return 204;
    }
  }
{% endif %}
{% endif %}

{% for path in nginx_restricted_paths %}
  location ~ {{  path }} {
{%    for ip in nginx_allow_access_to_restricted_paths_from_ips %}
    allow {{ ip }};
{%    endfor %}
    deny all;
  }
{% endfor %}

{% if nginx_context_proxy_enabled %}
{% for path in nginx_context_proxy_paths %}

  location {{ path }} {
    proxy_pass {{ nginx_context_proxy_host }}{{path}};
    proxy_cookie_domain {{ nginx_context_proxy_domain_equivalence }};
    proxy_set_header X-Forwarded-For $remote_addr;
  }
{% endfor %}
{% endif %}

{% if nginx_redirects_for_browser_profile_and_locale_enabled %}
  location ~* /actions/services/browser-profile.do {
    return 302 /deals/shop/user_settings/set_browser_profile?$args;
  }

  location ~* /actions/preferences/change-locale.do {
    return 302 /deals/shop/user_settings/change_locale?$args;
  }
{% endif %}

{% if nginx_internal_paths_enabled %}
{% for path in nginx_internal_paths %}

  location ~ {{ path }} {
    internal;
  }
{% endfor %}
{% endif %}

{% if nginx_php_enabled %}
{% if nginx_php_path_blacklist_enabled %}
  location ~ {{ nginx_php_path_blacklist_regexp }} {
{%   if nginx_php_path_blacklist_with_password %}
    auth_basic "Private";
    auth_basic_user_file {{ nginx_php_path_blacklist_with_password_auth_location }};

    fastcgi_pass unix:{{ php_fpm_socket_path }};
    fastcgi_index index.php;
    fastcgi_buffers 8 {{ nginx_fastcgi_buffers }};
    fastcgi_buffer_size {{ nginx_fastcgi_buffers }};
    include /etc/nginx/fastcgi_params;
{%   else %}
    try_files /{{ nginx_php_path_blacklist_try_files }} =404;
{%   endif %}
  }
{% endif %}

{% if nginx_whitelist_paths is string %}
  location ~ {{ nginx_whitelist_paths }} {
    if ($remote_addr_in_whitelist) {
      set $whitelisted true;
    }
    if ($x_forwarded_for_in_whitelist) {
      set $whitelisted true;
    }
    if ($whitelisted != true) {
      return 403;
    }
  }
{% endif %}

  # Defect #321 (http://trac.nginx.org/nginx/ticket/321) may require accomodation in code.
{% if nginx_php_index_only %}
  location / {
    try_files {% for nginx_fastcgi_script_name in nginx_fastcgi_script_names %}{{ nginx_fastcgi_script_name }}{% endfor %} =404;
{% else %}
  location / {
    try_files $uri {% if nginx_prerender_enabled %}@prerender;{% else %}$uri/ {% for nginx_fastcgi_script_name in nginx_fastcgi_script_names %}{{ nginx_fastcgi_script_name }}{{ nginx_php_append_querystring }}{% endfor %};{% endif %}

  }

{% if nginx_domain_redirect %}
  if ($host = {{ nginx_domain_redirect_source }}) {
    rewrite ^ $scheme://{{ nginx_domain_redirect_destination }} {{ nginx_domain_redirect_type }};
  }
{% endif %}


{% if nginx_redirects is iterable %}
{%  for redirect in nginx_redirects %}
  location {{ redirect.source }} {
    rewrite ^(.*)$ {{ redirect.destination }} {{ redirect.type }};
  }
{% endfor %}
{% endif %}

  location ~ \.php$ {
{% endif %}
{% if nginx_php_virtual_context_path %}
    location ~ ^{{ nginx_php_virtual_context_path }} {
      rewrite ^{{ nginx_php_virtual_context_path }}\/?(?<context>.*) /$context;
    }
{% endif %}
{% if nginx_flag_social_crawlers %}
    if ($http_user_agent ~ "(facebookexternalhit/[0-9]|Twitterbot|Pinterest|LinkedInBot|Google.*snippet)") {
      set $args $args&isSocialCrawler=1;
    }
{% endif %}
    fastcgi_pass unix:{{ php_fpm_socket_path }};
    fastcgi_index index.php;
    fastcgi_buffers 8 {{ nginx_fastcgi_buffers }};
    fastcgi_buffer_size {{ nginx_fastcgi_buffers }};
    include /etc/nginx/fastcgi_params;
{% if nginx_php_fastcgi_param_extras %}
{% for parameter in nginx_php_fastcgi_param_extras %}
    fastcgi_param {{ parameter }};
{% endfor %}
{% endif %}
  }
{% else %}
  location / {
    try_files $uri $uri/ /index.html;
  }
{% endif %}

{% if nginx_prerender_enabled %}
  location @prerender {
    proxy_set_header X-Prerender-Token {{ nginx_prerender_token }};

    set $prerender 0;
    if ($http_user_agent ~* "baiduspider|google.*snippet|twitterbot|facebookexternalhit|rogerbot|linkedinbot|embedly|quora link preview|showyoubot|outbrain|pinterest|slackbot|vkShare|W3C_Validator") {
      set $prerender 1;
    }
    if ($args ~ "_escaped_fragment_") {
      set $prerender 1;
    }
    if ($http_user_agent ~ "Prerender") {
      set $prerender 0;
    }
    if ($uri ~ "\.(js|css|xml|less|png|jpg|jpeg|gif|pdf|doc|txt|ico|rss|zip|mp3|rar|exe|wmv|doc|avi|ppt|mpg|mpeg|tif|wav|mov|psd|ai|xls|mp4|m4a|swf|dat|dmg|iso|flv|m4v|torrent|ttf|woff)") {
      set $prerender 0;
    }

    #resolve using Google's DNS server to force DNS resolution and prevent caching of IPs
    resolver 8.8.8.8;

    if ($prerender = 1) {
      #setting prerender as a variable forces DNS resolution since nginx caches IPs and doesnt play well with load balancing
      set $prerender "service.prerender.io";
      rewrite .* /$scheme://$host$request_uri? break;
      proxy_pass http://service.prerender.io;
    }
    if ($prerender = 0) {
      rewrite .* / break;
    }
  }
{% endif %}
{% if nginx_post_extended_configuration is defined %}
  {{ nginx_post_extended_configuration }}
{% endif %}
}
